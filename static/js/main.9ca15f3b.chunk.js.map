{"version":3,"sources":["redux/robots/robots.type.ts","redux/robots/robots.slice.ts","redux/hooks.ts","redux/search/search.type.ts","redux/search/search.slice.ts","containers/Heading.tsx","components/Fonts.tsx","components/Loading.tsx","containers/Main.tsx","redux/reducer.ts","redux/robots/robots.saga.ts","redux/search/search.saga.ts","redux/saga.ts","redux/store.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ERobotsActionType","fetchRobotsStart","createAction","FETCH_ROBOTS_START","fetchRobotsSuccess","FETCH_ROBOTS_SUCCESS","fetchRobotsFailure","FETCH_ROBOTS_FAILURE","robotsSlice","createSlice","name","initialState","robots","isFetching","errorMessage","reducers","extraReducers","builder","addCase","state","action","payload","useRobots","useAppSelector","robotsState","useRobotsSelector","robotsStateSelector","store","useAppDispatch","useDispatch","useSelector","ESearchActionType","searchFieldTyping","SEARCH_FIELD_TYPING","searchFieldChange","SEARCH_FIELD_CHANGE","searchSlice","searchField","Heading","ReactMemo","props","children","size","fontFamily","fontWeight","color","m","displayName","Fonts","styles","process","Loading","h","thickness","speed","emptyColor","ContentBody","lazy","theme","extendTheme","global","width","height","bgGradient","overflow","Main","isLoading","dispatch","useEffect","textAlign","fallback","rootReducer","combineReducers","robotsReducer","searchState","searchReducer","fetchRobotsWorker","fetchRobotsWatcher","doFetchRobots","a","fetch","response","json","delay","Math","random","call","put","message","takeLatest","type","searchFieldTypingWorker","searchFieldTypingWatcher","debounce","rootSaga","fork","sagaMiddleware","createSagaMiddleware","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9ca15f3b.chunk.js","sourcesContent":["export enum ERobotsActionType {\n  FETCH_ROBOTS_START = 'FETCH_ROBOTS_START',\n  FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS',\n  FETCH_ROBOTS_FAILURE = 'FETCH_ROBOTS_FAILURE'\n}\n\nexport interface IRobot {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n","import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { ERobotsActionType, IRobot } from './robots.type';\nimport { useAppSelector } from '../hooks';\n\n// Define a type for the slice state\ninterface IRobotsState {\n  robots: IRobot[];\n  isFetching: boolean;\n  errorMessage: string;\n}\n\n// Define the initial state using that type\nconst initialState: IRobotsState = {\n  robots: [],\n  isFetching: true,\n  errorMessage: ''\n};\n\nexport const fetchRobotsStart = createAction<void, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_START);\n\nexport const fetchRobotsSuccess = createAction<IRobot[], ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_SUCCESS);\n\nexport const fetchRobotsFailure = createAction<string, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_FAILURE);\n\nexport const robotsSlice = createSlice({\n  name: 'robots',\n  // `robotsSlice` will infer the state type from the `initialState` argument\n  initialState,\n  // reducers: {\n  //   fetchRobotsStart: state => {\n  //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n  //     // doesn't actually mutate the state because it uses the Immer library,\n  //     // which detects changes to a \"draft state\" and produces a brand new\n  //     // immutable state based off those changes\n  //     state.isFetching = true;\n  //   },\n  //   fetchRobotsSuccess: (state, action: PayloadAction<IRobot[]>) => {\n  //     state.isFetching = false;\n  //     state.robots = action.payload;\n  //     state.errorMessage = '';\n  //   },\n  //   fetchRobotsFailure: (state, action: PayloadAction<string>) => {\n  //     state.isFetching = false;\n  //     state.errorMessage = action.payload;\n  //     state.robots = [];\n  //   }\n  // },\n  reducers: {},\n  // \"builder callback API\", recommended for TypeScript users\n  extraReducers: builder => {\n    builder.addCase(fetchRobotsStart, state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.isFetching = true;\n    });\n    builder.addCase(fetchRobotsSuccess, (state, action: PayloadAction<IRobot[]>) => {\n      state.isFetching = false;\n      state.robots = action.payload;\n      state.errorMessage = '';\n    });\n    builder.addCase(fetchRobotsFailure, (state, action: PayloadAction<string>) => {\n      state.isFetching = false;\n      state.errorMessage = action.payload;\n      state.robots = [];\n    });\n  }\n});\n\n// export reducers actions to be used in saga\n// export const { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } = robotsSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.robots.robots)`\nexport const useRobots = () => useAppSelector(state => state.robotsState.robots);\n\nexport const useRobotsSelector = <T> (robotsStateSelector: (robotsState: IRobotsState) => T) => {\n  return useAppSelector(store => robotsStateSelector(store.robotsState));\n};\n\nexport default robotsSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export enum ESearchActionType {\n  SEARCH_FIELD_TYPING = 'SEARCH_FIELD_TYPING',\n  SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE'\n}\n","import { createAction, createSlice } from '@reduxjs/toolkit';\n\nimport { ESearchActionType } from './search.type';\nimport { useAppSelector } from '../hooks';\n\n// Define a type for the slice state\ninterface ISearchState {\n  searchField: string;\n}\n\n// Define the initial state using that type\nconst initialState: ISearchState = {\n  searchField: ''\n};\n\nexport const searchFieldTyping = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_TYPING);\n\nexport const searchFieldChange = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_CHANGE);\n\nexport const searchSlice = createSlice({\n  name: 'search',\n  // `searchSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(searchFieldChange, (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.searchField = action.payload;\n    });\n  }\n});\n\nexport const useSearchField = () => useAppSelector(state => state.searchState.searchField);\n\nexport default searchSlice.reducer;\n","import type React from 'react';\nimport { memo as ReactMemo } from 'react';\nimport { Heading as ChakraHeading } from '@chakra-ui/react';\n\ntype THeadingProps = {\n  size?: string;\n  fontFamily?: string;\n  fontWeight?: number | string;\n};\n\nconst Heading: React.FC<THeadingProps> = ReactMemo(props => {\n  const { children, size = \"xl\", fontFamily = \"heading\", fontWeight = \"bold\" } = props;\n\n  return (\n    <ChakraHeading\n      size={size}\n      fontFamily={fontFamily}\n      fontWeight={fontWeight}\n      color=\"teal.300\"\n      m={5}\n    >\n      {children}\n    </ChakraHeading>\n  );\n});\nHeading.displayName = 'Heading';\n\nexport default Heading;\n","import type React from 'react';\nimport { Global } from '@emotion/react';\n\nconst Fonts: React.FC = () => (\n  <Global\n    styles={`\n            @font-face {\n                font-family: 'SEGA LOGO FONT';\n                font-style: normal;\n                font-weight: normal;\n                font-display: swap;\n                src: local('SEGA LOGO FONT'), url(${process.env.PUBLIC_URL}/SEGA.woff) format('woff');\n            }\n        `}\n  />\n);\n\nexport default Fonts;\n","import type React from 'react';\r\nimport { Center, Spinner } from '@chakra-ui/react';\r\n\r\nconst Loading: React.FC = () => {\r\n  return (\r\n    <Center h=\"100vh\">\r\n      <Spinner\r\n        thickness=\"4px\"\r\n        speed=\"0.65s\"\r\n        emptyColor=\"gray.200\"\r\n        color=\"blue.500\"\r\n        size=\"xl\"\r\n      />\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import type React from 'react';\nimport { useEffect, lazy, Suspense } from 'react';\nimport { ChakraProvider, extendTheme, Box } from '@chakra-ui/react';\n\nimport Fonts from '../components/Fonts';\nimport Loading from '../components/Loading';\nimport Heading from './Heading';\n\nimport { useAppDispatch } from '../redux/hooks';\nimport { useRobotsSelector, fetchRobotsStart } from '../redux/robots/robots.slice';\n\nconst ContentBody = lazy(() => import('./ContentBody'));\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      \"body\": {\n        width: \"100%\",\n        height: \"100%\",\n        bgGradient: \"linear(to-r, teal.500, blue.900)\",\n        overflow: \"hidden\"\n      }\n    }\n  }\n});\n\nconst Main: React.FC = () => {\n  const { isLoading, errorMessage } = useRobotsSelector(({ isFetching, errorMessage }) => ({ isLoading: isFetching, errorMessage }));\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRobotsStart());\n  }, [dispatch]);\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Fonts />\n      <Box textAlign=\"center\">\n        <Heading size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200}>RoboFriends</Heading>\n        {isLoading\n          ? <Loading />\n          : errorMessage\n            ? <Heading>{errorMessage}</Heading>\n            : <Suspense fallback={<Loading />}><ContentBody /></Suspense>\n        }\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default Main;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport robotsReducer from './robots/robots.slice';\nimport searchReducer from './search/search.slice';\n\nconst rootReducer = combineReducers({\n  robotsState: robotsReducer,\n  searchState: searchReducer\n});\n\nexport default rootReducer;\n","import { takeLatest, call, put, delay } from 'redux-saga/effects';\n\nimport { IRobot } from './robots.type';\nimport { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } from './robots.slice';\n\nconst doFetchRobots = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  return await response.json();\n};\n\nfunction* fetchRobotsWorker () {\n  try {\n    yield delay(2000);\n\n    if (Math.random() > 0.2) {\n      const robots: IRobot[] = yield call(doFetchRobots);\n      yield put(fetchRobotsSuccess(robots));\n    } else {\n      yield put(fetchRobotsFailure('error fetching robots'));\n    }\n  } catch (error) {\n    yield put(fetchRobotsFailure(error.message));\n  }\n}\n\nexport function* fetchRobotsWatcher () {\n  yield takeLatest(fetchRobotsStart.type, fetchRobotsWorker);\n}\n","import { debounce, put } from 'redux-saga/effects';\n\nimport { searchFieldTyping, searchFieldChange } from './search.slice';\n\nfunction* searchFieldTypingWorker (action: ReturnType<typeof searchFieldTyping>) {\n  yield put(searchFieldChange(action.payload));\n}\n\nexport function* searchFieldTypingWatcher () {\n  yield debounce(200, searchFieldTyping.type, searchFieldTypingWorker);\n}\n","import { fork } from 'redux-saga/effects';\n\nimport { fetchRobotsWatcher } from './robots/robots.saga';\nimport { searchFieldTypingWatcher } from './search/search.saga';\n\nexport default function* rootSaga () {\n  yield fork(fetchRobotsWatcher);\n  yield fork(searchFieldTypingWatcher);\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducer';\nimport rootSaga from './saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware]\n});\n\nlet sagaTask = sagaMiddleware.run(rootSaga);\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./reducer', () => store.replaceReducer(rootReducer));\n  module.hot.accept('./saga', () => {\n    const newRootSaga = require('./saga').default;\n    sagaTask.cancel();\n    sagaTask.toPromise().then(() => {\n      sagaTask = sagaMiddleware.run(newRootSaga);\n    });\n  });\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {robots: RobotsState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Main from './containers/Main';\nimport store from './redux/store';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Main />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}