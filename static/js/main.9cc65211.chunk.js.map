{"version":3,"sources":["components/Fonts.tsx","containers/Heading.tsx","redux/search/search.type.ts","redux/hooks.ts","redux/search/search.slice.ts","containers/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/Card.tsx","components/CardList.tsx","containers/Robots.tsx","redux/robots/robots.type.ts","redux/robots/robots.slice.ts","containers/Main.tsx","redux/reducer.ts","redux/robots/robots.saga.ts","redux/search/search.saga.ts","redux/saga.ts","redux/store.ts","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["Fonts","styles","process","Heading","ReactMemo","props","children","size","fontFamily","fontWeight","color","m","displayName","ESearchActionType","useAppDispatch","useDispatch","useAppSelector","useSelector","searchFieldTyping","createAction","SEARCH_FIELD_TYPING","searchFieldChange","SEARCH_FIELD_CHANGE","searchSlice","createSlice","name","initialState","searchField","reducers","extraReducers","builder","addCase","state","action","payload","SearchBox","useState","value","setValue","inputRef","useRef","dispatch","bg","maxW","mx","variant","icon","aria-label","_focus","boxShadow","onClick","current","focus","placeholder","ref","onChange","event","target","Scroll","offsetH","overflowY","border","height","ErrorBoundary","hasError","this","as","React","Component","Card","username","email","d","rounded","p","_hover","transform","transition","alt","src","fallbackSrc","textAlign","fontSize","mt","toLowerCase","CardList","robots","map","robot","id","BreakException","Robots","prevProps","nextProps","length","propsAreEqual","forEach","i","e","ERobotsActionType","fetchRobotsStart","FETCH_ROBOTS_START","fetchRobotsSuccess","FETCH_ROBOTS_SUCCESS","fetchRobotsFailure","FETCH_ROBOTS_FAILURE","robotsSlice","isFetching","errorMessage","theme","extendTheme","global","width","bgGradient","overflow","Main","robotsState","searchState","isLoading","useEffect","filteredRobots","filter","includes","rootReducer","combineReducers","robotsReducer","searchReducer","fetchRobotsWorker","fetchRobotsWatcher","doFetchRobots","a","fetch","response","json","delay","Math","random","call","put","message","takeLatest","type","searchFieldTypingWorker","searchFieldTypingWatcher","debounce","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9cc65211.chunk.js","sourcesContent":["import type React from 'react';\r\nimport { Global } from '@emotion/react';\r\n\r\nconst Fonts: React.FC = () => (\r\n    <Global\r\n        styles={`\r\n            @font-face {\r\n                font-family: 'SEGA LOGO FONT';\r\n                font-style: normal;\r\n                font-weight: normal;\r\n                font-display: swap;\r\n                src: local('SEGA LOGO FONT'), url(${process.env.PUBLIC_URL}/SEGA.woff) format('woff');\r\n            }\r\n        `}\r\n    />\r\n);\r\n\r\nexport default Fonts;\r\n","import type React from 'react';\r\nimport { memo as ReactMemo } from 'react';\r\nimport { Heading as ChakraHeading } from '@chakra-ui/react';\r\n\r\ntype THeadingProps = {\r\n    size?: string;\r\n    fontFamily?: string;\r\n    fontWeight?: number | string;\r\n};\r\n\r\nconst Heading: React.FC<THeadingProps> = ReactMemo(props => {\r\n    const { children, size = \"xl\", fontFamily = \"heading\", fontWeight = \"bold\" } = props;\r\n\r\n    return (\r\n        <ChakraHeading\r\n            size={size}\r\n            fontFamily={fontFamily}\r\n            fontWeight={fontWeight}\r\n            color=\"teal.300\"\r\n            m={5}\r\n        >\r\n            {children}\r\n        </ChakraHeading>\r\n    );\r\n});\r\nHeading.displayName = 'Heading';\r\n\r\nexport default Heading;\r\n","export enum ESearchActionType {\r\n    SEARCH_FIELD_TYPING = 'SEARCH_FIELD_TYPING',\r\n    SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE'\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAction, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { ESearchActionType } from './search.type';\r\n\r\n// Define a type for the slice state\r\ninterface ISearchState {\r\n    searchField: string;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ISearchState = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchFieldTyping = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_TYPING);\r\n\r\nexport const searchFieldChange = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_CHANGE);\r\n\r\nexport const searchSlice = createSlice({\r\n    name: 'search',\r\n    // `searchSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(searchFieldChange, (state, action) => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.searchField = action.payload;\r\n        });\r\n    }\r\n});\r\n\r\nexport default searchSlice.reducer;\r\n","import type React from 'react';\r\nimport { useState, useRef, memo as ReactMemo } from 'react';\r\nimport { Input, InputGroup, InputRightElement, IconButton } from '@chakra-ui/react';\r\nimport { FiX } from 'react-icons/fi';\r\n\r\nimport { useAppDispatch } from '../redux/hooks';\r\nimport { searchFieldTyping } from '../redux/search/search.slice';\r\n\r\nconst SearchBox: React.FC = ReactMemo(() => {\r\n    const [value, setValue] = useState<string>('');\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const handleClearClick: React.MouseEventHandler<HTMLButtonElement> = () => {\r\n        if (value) {\r\n            dispatch(searchFieldTyping(''));\r\n            setValue('');\r\n            inputRef.current?.focus();\r\n        }\r\n    };\r\n\r\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\r\n        const value = event.target.value;\r\n        dispatch(searchFieldTyping(value));\r\n        setValue(value);\r\n    };\r\n\r\n    return (\r\n        <InputGroup m={3} bg=\"blue.50\" maxW=\"250px\" mx=\"auto\">\r\n            {value &&\r\n                <InputRightElement\r\n                    children={\r\n                        <IconButton\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            icon={<FiX />}\r\n                            aria-label=\"Clear search field\"\r\n                            _focus={{ boxShadow: 'none' }}\r\n                            onClick={handleClearClick}\r\n                        />\r\n                    }\r\n                />\r\n            }\r\n            <Input\r\n                placeholder=\"Search a robot\"\r\n                ref={inputRef}\r\n                value={value}\r\n                onChange={handleInputChange}\r\n            />\r\n        </InputGroup>\r\n    );\r\n});\r\nSearchBox.displayName = 'SearchBox';\r\n\r\nexport default SearchBox;\r\n","import type React from 'react';\r\nimport { Box } from '@chakra-ui/react';\r\n\r\ntype TScrollProps = {\r\n    offsetH: number;\r\n};\r\n\r\nconst Scroll: React.FC<TScrollProps> = ({ offsetH, children }) => {\r\n    return (\r\n        <Box overflowY=\"auto\" border=\"1px solid black\" height={`calc(100vh - ${offsetH}px)`}>\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport { Heading } from '@chakra-ui/react';\r\n\r\ntype TErrorBoundaryProps = {};\r\ntype TErrorBoundaryState = { hasError: boolean; };\r\n\r\nexport default class ErrorBoundary extends React.Component<TErrorBoundaryProps, TErrorBoundaryState> {\r\n    constructor (props: TErrorBoundaryProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError () {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    // componentDidCatch (error: Error, errorInfo: ErrorInfo) {\r\n    //     // You can also log the error to an error reporting service\r\n    //     logErrorToMyService(error, errorInfo);\r\n    // }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <Heading as=\"h2\" size=\"md\" color=\"teal.300\">Ops. This is not good!</Heading>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","import type React from 'react';\r\nimport { Box, Image, Heading, Text } from '@chakra-ui/react';\r\n\r\ntype TCardProps = {\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n};\r\n\r\nconst Card: React.FC<TCardProps> = ({ username, name, email }) => {\r\n    return (\r\n        <Box\r\n            d=\"inline-grid\"\r\n            bg=\"green.200\"\r\n            maxW=\"300px\"\r\n            height=\"360px\"\r\n            rounded=\"md\"\r\n            p={4}\r\n            m={4}\r\n            boxShadow=\"md\"\r\n            _hover={{ transform: \"scale(1.05)\" }}\r\n            transition=\"all .2s ease-in-out\"\r\n        >\r\n            <Image\r\n                alt=\"avatar of a robot\"\r\n                src={`https://robohash.org/${username}?size=250x250`}\r\n                fallbackSrc=\"placeholder_robot.png\" mx=\"auto\"\r\n            />\r\n            <Box textAlign=\"center\">\r\n                <Heading as=\"h3\" size=\"md\">{name}</Heading>\r\n                <Text fontSize=\"md\" mt=\"1\">{email.toLowerCase()}</Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import type React from 'react';\r\n\r\nimport { IRobot } from '../redux/robots/robots.type';\r\nimport Card from './Card';\r\n\r\ntype TCardListProps = {\r\n    robots: IRobot[];\r\n};\r\n\r\nconst CardList: React.FC<TCardListProps> = ({ robots }) => {\r\n    return (\r\n        <>\r\n            {robots.map(robot =>\r\n                <Card\r\n                    key={robot.id}\r\n                    username={robot.username}\r\n                    name={robot.name}\r\n                    email={robot.email}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import type React from 'react';\r\nimport { memo as ReactMemo } from 'react';\r\n\r\nimport { IRobot } from '../redux/robots/robots.type';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport CardList from '../components/CardList';\r\n\r\ntype TRobotsProps = {\r\n    robots: IRobot[];\r\n};\r\n\r\nconst BreakException = {};\r\n\r\nconst Robots: React.FC<TRobotsProps> = ReactMemo(({ robots }) => {\r\n    return (\r\n        <Scroll offsetH={155}>\r\n            <ErrorBoundary>\r\n                <CardList robots={robots} />\r\n            </ErrorBoundary>\r\n        </Scroll>\r\n    );\r\n}, (prevProps, nextProps) => {\r\n    if (nextProps.robots.length !== prevProps.robots.length) return false;\r\n\r\n    let propsAreEqual = true;\r\n    try {\r\n        nextProps.robots.forEach((robot, i) => {\r\n            if (robot.id !== prevProps.robots[i].id) {\r\n                propsAreEqual = false;\r\n                throw BreakException;\r\n            }\r\n        });\r\n    } catch (e) {\r\n        if (e !== BreakException) throw e;\r\n    }\r\n    return propsAreEqual;\r\n});\r\nRobots.displayName = 'Robots';\r\n\r\nexport default Robots;\r\n","export enum ERobotsActionType {\r\n    FETCH_ROBOTS_START = 'FETCH_ROBOTS_START',\r\n    FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS',\r\n    FETCH_ROBOTS_FAILURE = 'FETCH_ROBOTS_FAILURE'\r\n}\r\n\r\nexport interface IRobot {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n}\r\n","import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { ERobotsActionType, IRobot } from './robots.type';\r\nimport { RootState } from '../store';\r\n\r\n// Define a type for the slice state\r\ninterface IRobotsState {\r\n    robots: IRobot[];\r\n    isFetching: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: IRobotsState = {\r\n    robots: [],\r\n    isFetching: true,\r\n    errorMessage: ''\r\n};\r\n\r\nexport const fetchRobotsStart = createAction<void, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_START);\r\n\r\nexport const fetchRobotsSuccess = createAction<IRobot[], ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_SUCCESS);\r\n\r\nexport const fetchRobotsFailure = createAction<string, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_FAILURE);\r\n\r\nexport const robotsSlice = createSlice({\r\n    name: 'robots',\r\n    // `robotsSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    // reducers: {\r\n    //     fetchRobotsStart: state => {\r\n    //         // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    //         // doesn't actually mutate the state because it uses the Immer library,\r\n    //         // which detects changes to a \"draft state\" and produces a brand new\r\n    //         // immutable state based off those changes\r\n    //         state.isFetching = true;\r\n    //     },\r\n    //     fetchRobotsSuccess: (state, action: PayloadAction<IRobot[]>) => {\r\n    //         state.isFetching = false;\r\n    //         state.robots = action.payload;\r\n    //         state.errorMessage = '';\r\n    //     },\r\n    //     fetchRobotsFailure: (state, action: PayloadAction<string>) => {\r\n    //         state.isFetching = false;\r\n    //         state.errorMessage = action.payload;\r\n    //         state.robots = [];\r\n    //     }\r\n    // },\r\n    reducers: {},\r\n    // \"builder callback API\", recommended for TypeScript users\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchRobotsStart, state => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.isFetching = true;\r\n        });\r\n        builder.addCase(fetchRobotsSuccess, (state, action: PayloadAction<IRobot[]>) => {\r\n            state.isFetching = false;\r\n            state.robots = action.payload;\r\n            state.errorMessage = '';\r\n        });\r\n        builder.addCase(fetchRobotsFailure, (state, action: PayloadAction<string>) => {\r\n            state.isFetching = false;\r\n            state.errorMessage = action.payload;\r\n            state.robots = [];\r\n        });\r\n    }\r\n});\r\n\r\n// export reducers actions to be used in saga\r\n// export const { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } = robotsSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.robots.robots)`\r\nexport const selectRobots = (state: RootState) => state.robotsState.robots;\r\n\r\nexport default robotsSlice.reducer;\r\n","import type React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { ChakraProvider, extendTheme, Box } from '@chakra-ui/react';\r\n\r\nimport Fonts from '../components/Fonts';\r\nimport Heading from './Heading';\r\nimport SearchBox from './SearchBox';\r\nimport Robots from './Robots';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../redux/hooks';\r\nimport { fetchRobotsStart } from '../redux/robots/robots.slice';\r\n\r\nconst theme = extendTheme({\r\n    styles: {\r\n        global: {\r\n            \"body\": {\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                bgGradient: \"linear(to-r, teal.500, blue.900)\",\r\n                overflow: \"hidden\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst Main: React.FC = () => {\r\n    const robots = useAppSelector(state => state.robotsState.robots);\r\n    const searchField = useAppSelector(state => state.searchState.searchField);\r\n    const isLoading = useAppSelector(state => state.robotsState.isFetching);\r\n    const errorMessage = useAppSelector(state => state.robotsState.errorMessage);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchRobotsStart());\r\n    }, [dispatch]);\r\n\r\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    return (\r\n        <ChakraProvider theme={theme}>\r\n            <Fonts />\r\n            <Box textAlign=\"center\">\r\n                <Heading size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200}>RoboFriends</Heading>\r\n                {isLoading\r\n                    ? <Heading>Loading...</Heading>\r\n                    : errorMessage\r\n                        ? <Heading>{errorMessage}</Heading>\r\n                        : <>\r\n                            <SearchBox />\r\n                            {filteredRobots.length\r\n                                ? <Robots robots={filteredRobots} />\r\n                                : <Heading size=\"l\">No robots found :(</Heading>\r\n                            }\r\n                        </>\r\n                }\r\n            </Box>\r\n        </ChakraProvider>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport robotsReducer from './robots/robots.slice';\r\nimport searchReducer from './search/search.slice';\r\n\r\nconst rootReducer = combineReducers({\r\n    robotsState: robotsReducer,\r\n    searchState: searchReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { takeLatest, call, put, delay } from 'redux-saga/effects';\r\n\r\nimport { IRobot } from './robots.type';\r\nimport { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } from './robots.slice';\r\nimport { searchFieldChange } from '../search/search.slice';\r\n\r\nconst doFetchRobots = async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    return await response.json();\r\n};\r\n\r\nfunction* fetchRobotsWorker () {\r\n    try {\r\n        yield delay(2000);\r\n\r\n        if (Math.random() > 0.2) {\r\n            const robots: IRobot[] = yield call(doFetchRobots);\r\n            yield put(fetchRobotsSuccess(robots));\r\n            yield put(searchFieldChange(''));\r\n        } else {\r\n            yield put(fetchRobotsFailure('error fetching robots'));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchRobotsFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* fetchRobotsWatcher () {\r\n    yield takeLatest(fetchRobotsStart.type, fetchRobotsWorker);\r\n}\r\n","import { debounce, put } from 'redux-saga/effects';\r\n\r\nimport { searchFieldTyping, searchFieldChange } from './search.slice';\r\n\r\nfunction* searchFieldTypingWorker (action: ReturnType<typeof searchFieldTyping>) {\r\n    yield put(searchFieldChange(action.payload));\r\n}\r\n\r\nexport function* searchFieldTypingWatcher () {\r\n    yield debounce(200, searchFieldTyping.type, searchFieldTypingWorker);\r\n}\r\n","import { fork } from 'redux-saga/effects';\r\n\r\nimport { fetchRobotsWatcher } from './robots/robots.saga';\r\nimport { searchFieldTypingWatcher } from './search/search.saga';\r\n\r\nexport default function* rootSaga () {\r\n    yield fork(fetchRobotsWatcher);\r\n    yield fork(searchFieldTypingWatcher);\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducer';\r\nimport rootSaga from './saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware]\r\n});\r\n\r\nlet sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./reducer', () => store.replaceReducer(rootReducer));\r\n    module.hot.accept('./saga', () => {\r\n        const newRootSaga = require('./saga').default;\r\n        sagaTask.cancel();\r\n        sagaTask.toPromise().then(() => {\r\n            sagaTask = sagaMiddleware.run(newRootSaga);\r\n        });\r\n    });\r\n}\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {robots: RobotsState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Main from './containers/Main';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Main />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}