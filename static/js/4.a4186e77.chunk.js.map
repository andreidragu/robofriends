{"version":3,"sources":["containers/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/Card.tsx","components/CardList.tsx","containers/Robots.tsx","containers/ContentBody.tsx"],"names":["SearchBox","ReactMemo","useState","value","setValue","inputRef","useRef","dispatch","useAppDispatch","m","bg","maxW","mx","children","variant","size","icon","aria-label","_focus","boxShadow","onClick","searchFieldTyping","current","focus","placeholder","ref","onChange","event","target","displayName","Scroll","offsetH","overflowY","border","height","ErrorBoundary","props","state","hasError","this","as","color","React","Component","Card","username","name","email","d","rounded","p","_hover","transform","transition","alt","src","fallbackSrc","textAlign","fontSize","mt","toLowerCase","CardList","robots","map","robot","id","BreakException","Robots","prevProps","nextProps","length","propsAreEqual","forEach","i","e","ContentBody","useAppSelector","robotsState","searchField","searchState","filteredRobots","filter","includes","Heading"],"mappings":"uOAQMA,EAAsBC,gBAAU,WACpC,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAyB,MACpCC,EAAWC,cAgBjB,OACE,eAAC,IAAD,CAAYC,EAAG,EAAGC,GAAG,UAAUC,KAAK,QAAQC,GAAG,OAA/C,UACGT,GACC,cAAC,IAAD,CACEU,SACE,cAAC,IAAD,CACEC,QAAQ,QACRC,KAAK,KACLC,KAAM,cAAC,IAAD,IACNC,aAAW,qBACXC,OAAQ,CAAEC,UAAW,QACrBC,QAzByD,WACvD,IAAD,EAAPjB,IACFI,EAASc,YAAkB,KAC3BjB,EAAS,IACT,UAAAC,EAASiB,eAAT,SAAkBC,cA0BlB,cAAC,IAAD,CACEC,YAAY,iBACZC,IAAKpB,EACLF,MAAOA,EACPuB,SA1BgE,SAAAC,GACpE,IAAMxB,EAAQwB,EAAMC,OAAOzB,MAC3BI,EAASc,YAAkBlB,IAC3BC,EAASD,YA4BbH,EAAU6B,YAAc,YAET7B,Q,SCvCA8B,EARwB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASlB,EAAe,EAAfA,SACjD,OACE,cAAC,IAAD,CAAKmB,UAAU,OAAOC,OAAO,kBAAkBC,OAAM,uBAAkBH,EAAlB,OAArD,SACGlB,K,4CCJcsB,E,kDACnB,WAAaC,GAA6B,IAAD,8BACvC,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFc,E,0CAezC,WACE,OAAIC,KAAKF,MAAMC,SAEN,cAAC,IAAD,CAASE,GAAG,KAAKzB,KAAK,KAAK0B,MAAM,WAAjC,oCAGFF,KAAKH,MAAMvB,Y,uCAhBpB,WAEE,MAAO,CAAEyB,UAAU,O,GARoBI,IAAMC,W,kBC8BlCC,EA3BoB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACpD,OACE,eAAC,IAAD,CACEC,EAAE,cACFtC,GAAG,YACHC,KAAK,QACLuB,OAAO,QACPe,QAAQ,KACRC,EAAG,EACHzC,EAAG,EACHU,UAAU,KACVgC,OAAQ,CAAEC,UAAW,eACrBC,WAAW,sBAVb,UAYE,cAAC,IAAD,CACEC,IAAI,oBACJC,IAAG,+BAA0BV,EAA1B,iBACHW,YAAY,wBAAwB5C,GAAG,SAEzC,eAAC,IAAD,CAAK6C,UAAU,SAAf,UACE,cAAC,IAAD,CAASjB,GAAG,KAAKzB,KAAK,KAAtB,SAA4B+B,IAC5B,cAAC,IAAD,CAAMY,SAAS,KAAKC,GAAG,IAAvB,SAA4BZ,EAAMa,uBCN3BC,EAf4B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,OACE,mCACGA,EAAOC,KAAI,SAAAC,GAAK,OACf,cAAC,EAAD,CAEEnB,SAAUmB,EAAMnB,SAChBC,KAAMkB,EAAMlB,KACZC,MAAOiB,EAAMjB,OAHRiB,EAAMC,UCFfC,EAAiB,GAEjBC,EAAiClE,gBAAU,YAAiB,IAAd6D,EAAa,EAAbA,OAClD,OACE,cAAC,EAAD,CAAQ/B,QAAS,IAAjB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU+B,OAAQA,WAIvB,SAACM,EAAWC,GACb,GAAIA,EAAUP,OAAOQ,SAAWF,EAAUN,OAAOQ,OAAQ,OAAO,EAEhE,IAAIC,GAAgB,EACpB,IACEF,EAAUP,OAAOU,SAAQ,SAACR,EAAOS,GAC/B,GAAIT,EAAMC,KAAOG,EAAUN,OAAOW,GAAGR,GAEnC,MADAM,GAAgB,EACVL,KAGV,MAAOQ,GACP,GAAIA,IAAMR,EAAgB,MAAMQ,EAElC,OAAOH,KAETJ,EAAOtC,YAAc,SAENsC,Q,QCfAQ,UAjBe,WAC5B,IAAMb,EAASc,aAAe,SAAAvC,GAAK,OAAIA,EAAMwC,YAAYf,UACnDgB,EAAcF,aAAe,SAAAvC,GAAK,OAAIA,EAAM0C,YAAYD,eAExDE,EAAiBlB,EAAOmB,QAAO,SAAAjB,GAAK,OAAIA,EAAMlB,KAAKc,cAAcsB,SAASJ,EAAYlB,kBAE5F,OACE,qCACE,cAAC,EAAD,IACCoB,EAAeV,OACZ,cAAC,EAAD,CAAQR,OAAQkB,IAChB,cAACG,EAAA,EAAD,CAASpE,KAAK,IAAd","file":"static/js/4.a4186e77.chunk.js","sourcesContent":["import type React from 'react';\nimport { useState, useRef, memo as ReactMemo } from 'react';\nimport { Input, InputGroup, InputRightElement, IconButton } from '@chakra-ui/react';\nimport { FiX } from 'react-icons/fi';\n\nimport { useAppDispatch } from '../redux/hooks';\nimport { searchFieldTyping } from '../redux/search/search.slice';\n\nconst SearchBox: React.FC = ReactMemo(() => {\n  const [value, setValue] = useState<string>('');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useAppDispatch();\n\n  const handleClearClick: React.MouseEventHandler<HTMLButtonElement> = () => {\n    if (value) {\n      dispatch(searchFieldTyping(''));\n      setValue('');\n      inputRef.current?.focus();\n    }\n  };\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    const value = event.target.value;\n    dispatch(searchFieldTyping(value));\n    setValue(value);\n  };\n\n  return (\n    <InputGroup m={3} bg=\"blue.50\" maxW=\"250px\" mx=\"auto\">\n      {value &&\n        <InputRightElement\n          children={\n            <IconButton\n              variant=\"ghost\"\n              size=\"sm\"\n              icon={<FiX />}\n              aria-label=\"Clear search field\"\n              _focus={{ boxShadow: 'none' }}\n              onClick={handleClearClick}\n            />\n          }\n        />\n      }\n      <Input\n        placeholder=\"Search a robot\"\n        ref={inputRef}\n        value={value}\n        onChange={handleInputChange}\n      />\n    </InputGroup>\n  );\n});\nSearchBox.displayName = 'SearchBox';\n\nexport default SearchBox;\n","import type React from 'react';\nimport { Box } from '@chakra-ui/react';\n\ntype TScrollProps = {\n  offsetH: number;\n};\n\nconst Scroll: React.FC<TScrollProps> = ({ offsetH, children }) => {\n  return (\n    <Box overflowY=\"auto\" border=\"1px solid black\" height={`calc(100vh - ${offsetH}px)`}>\n      {children}\n    </Box>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\ntype TErrorBoundaryProps = {};\ntype TErrorBoundaryState = { hasError: boolean; };\n\nexport default class ErrorBoundary extends React.Component<TErrorBoundaryProps, TErrorBoundaryState> {\n  constructor (props: TErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError () {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  // componentDidCatch (error: Error, errorInfo: ErrorInfo) {\n  //     // You can also log the error to an error reporting service\n  //     logErrorToMyService(error, errorInfo);\n  // }\n\n  render () {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <Heading as=\"h2\" size=\"md\" color=\"teal.300\">Ops. This is not good!</Heading>;\n    }\n\n    return this.props.children;\n  }\n}\n","import type React from 'react';\nimport { Box, Image, Heading, Text } from '@chakra-ui/react';\n\ntype TCardProps = {\n  name: string;\n  username: string;\n  email: string;\n};\n\nconst Card: React.FC<TCardProps> = ({ username, name, email }) => {\n  return (\n    <Box\n      d=\"inline-grid\"\n      bg=\"green.200\"\n      maxW=\"300px\"\n      height=\"360px\"\n      rounded=\"md\"\n      p={4}\n      m={4}\n      boxShadow=\"md\"\n      _hover={{ transform: \"scale(1.05)\" }}\n      transition=\"all .2s ease-in-out\"\n    >\n      <Image\n        alt=\"avatar of a robot\"\n        src={`https://robohash.org/${username}?size=250x250`}\n        fallbackSrc=\"placeholder_robot.png\" mx=\"auto\"\n      />\n      <Box textAlign=\"center\">\n        <Heading as=\"h3\" size=\"md\">{name}</Heading>\n        <Text fontSize=\"md\" mt=\"1\">{email.toLowerCase()}</Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Card;\n","import type React from 'react';\n\nimport { IRobot } from '../redux/robots/robots.type';\nimport Card from './Card';\n\ntype TCardListProps = {\n  robots: IRobot[];\n};\n\nconst CardList: React.FC<TCardListProps> = ({ robots }) => {\n  return (\n    <>\n      {robots.map(robot =>\n        <Card\n          key={robot.id}\n          username={robot.username}\n          name={robot.name}\n          email={robot.email}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CardList;\n","import type React from 'react';\nimport { memo as ReactMemo } from 'react';\n\nimport { IRobot } from '../redux/robots/robots.type';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport CardList from '../components/CardList';\n\ntype TRobotsProps = {\n  robots: IRobot[];\n};\n\nconst BreakException = {};\n\nconst Robots: React.FC<TRobotsProps> = ReactMemo(({ robots }) => {\n  return (\n    <Scroll offsetH={155}>\n      <ErrorBoundary>\n        <CardList robots={robots} />\n      </ErrorBoundary>\n    </Scroll>\n  );\n}, (prevProps, nextProps) => {\n  if (nextProps.robots.length !== prevProps.robots.length) return false;\n\n  let propsAreEqual = true;\n  try {\n    nextProps.robots.forEach((robot, i) => {\n      if (robot.id !== prevProps.robots[i].id) {\n        propsAreEqual = false;\n        throw BreakException;\n      }\n    });\n  } catch (e) {\n    if (e !== BreakException) throw e;\n  }\n  return propsAreEqual;\n});\nRobots.displayName = 'Robots';\n\nexport default Robots;\n","import type React from 'react';\r\n\r\nimport SearchBox from './SearchBox';\r\nimport Robots from './Robots';\r\nimport Heading from './Heading';\r\n\r\nimport { useAppSelector } from '../redux/hooks';\r\n\r\nconst ContentBody: React.FC = () => {\r\n  const robots = useAppSelector(state => state.robotsState.robots);\r\n  const searchField = useAppSelector(state => state.searchState.searchField);\r\n\r\n  const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n  return (\r\n    <>\r\n      <SearchBox />\r\n      {filteredRobots.length\r\n        ? <Robots robots={filteredRobots} />\r\n        : <Heading size=\"l\">No robots found :(</Heading>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContentBody;\r\n"],"sourceRoot":""}