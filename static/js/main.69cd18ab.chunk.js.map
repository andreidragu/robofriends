{"version":3,"sources":["components/Fonts.tsx","containers/Heading.tsx","redux/search/search.type.ts","redux/hooks.ts","redux/search/search.slice.ts","containers/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/Card.tsx","components/CardList.tsx","containers/Robots.tsx","redux/robots/robots.type.ts","redux/robots/robots.slice.ts","containers/Main.tsx","redux/reducer.ts","redux/robots/robots.saga.ts","redux/search/search.saga.ts","redux/saga.ts","redux/store.ts","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["Fonts","styles","process","Heading","ReactMemo","props","children","size","fontFamily","fontWeight","color","m","displayName","ESearchActionType","useAppDispatch","useDispatch","useAppSelector","useSelector","searchFieldTyping","createAction","SEARCH_FIELD_TYPING","searchFieldChange","SEARCH_FIELD_CHANGE","searchSlice","createSlice","name","initialState","searchField","reducers","extraReducers","builder","addCase","state","action","payload","SearchBox","useState","value","setValue","inputRef","useRef","dispatch","bg","maxW","mx","variant","icon","aria-label","_focus","boxShadow","onClick","current","focus","placeholder","ref","onChange","event","target","Scroll","offsetH","overflowY","border","height","ErrorBoundary","hasError","this","as","React","Component","Card","username","email","d","rounded","p","_hover","transform","transition","alt","src","fallbackSrc","textAlign","fontSize","mt","toLowerCase","CardList","robots","map","robot","id","BreakException","Robots","prevProps","nextProps","length","propsAreEqual","forEach","i","e","ERobotsActionType","fetchRobotsStart","FETCH_ROBOTS_START","fetchRobotsSuccess","FETCH_ROBOTS_SUCCESS","fetchRobotsFailure","FETCH_ROBOTS_FAILURE","robotsSlice","isFetching","errorMessage","theme","extendTheme","global","width","bgGradient","overflow","Main","robotsState","searchState","isLoading","useEffect","filteredRobots","filter","includes","rootReducer","combineReducers","robotsReducer","searchReducer","fetchRobotsWorker","fetchRobotsWatcher","doFetchRobots","a","fetch","response","json","delay","Math","random","call","put","message","takeLatest","type","searchFieldTypingWorker","searchFieldTypingWatcher","debounce","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.69cd18ab.chunk.js","sourcesContent":["import type React from 'react';\nimport { Global } from '@emotion/react';\n\nconst Fonts: React.FC = () => (\n  <Global\n    styles={`\n            @font-face {\n                font-family: 'SEGA LOGO FONT';\n                font-style: normal;\n                font-weight: normal;\n                font-display: swap;\n                src: local('SEGA LOGO FONT'), url(${process.env.PUBLIC_URL}/SEGA.woff) format('woff');\n            }\n        `}\n  />\n);\n\nexport default Fonts;\n","import type React from 'react';\nimport { memo as ReactMemo } from 'react';\nimport { Heading as ChakraHeading } from '@chakra-ui/react';\n\ntype THeadingProps = {\n  size?: string;\n  fontFamily?: string;\n  fontWeight?: number | string;\n};\n\nconst Heading: React.FC<THeadingProps> = ReactMemo(props => {\n  const { children, size = \"xl\", fontFamily = \"heading\", fontWeight = \"bold\" } = props;\n\n  return (\n    <ChakraHeading\n      size={size}\n      fontFamily={fontFamily}\n      fontWeight={fontWeight}\n      color=\"teal.300\"\n      m={5}\n    >\n      {children}\n    </ChakraHeading>\n  );\n});\nHeading.displayName = 'Heading';\n\nexport default Heading;\n","export enum ESearchActionType {\n  SEARCH_FIELD_TYPING = 'SEARCH_FIELD_TYPING',\n  SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE'\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAction, createSlice } from '@reduxjs/toolkit';\n\nimport { ESearchActionType } from './search.type';\n\n// Define a type for the slice state\ninterface ISearchState {\n  searchField: string;\n}\n\n// Define the initial state using that type\nconst initialState: ISearchState = {\n  searchField: ''\n};\n\nexport const searchFieldTyping = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_TYPING);\n\nexport const searchFieldChange = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_CHANGE);\n\nexport const searchSlice = createSlice({\n  name: 'search',\n  // `searchSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(searchFieldChange, (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.searchField = action.payload;\n    });\n  }\n});\n\nexport default searchSlice.reducer;\n","import type React from 'react';\nimport { useState, useRef, memo as ReactMemo } from 'react';\nimport { Input, InputGroup, InputRightElement, IconButton } from '@chakra-ui/react';\nimport { FiX } from 'react-icons/fi';\n\nimport { useAppDispatch } from '../redux/hooks';\nimport { searchFieldTyping } from '../redux/search/search.slice';\n\nconst SearchBox: React.FC = ReactMemo(() => {\n  const [value, setValue] = useState<string>('');\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useAppDispatch();\n\n  const handleClearClick: React.MouseEventHandler<HTMLButtonElement> = () => {\n    if (value) {\n      dispatch(searchFieldTyping(''));\n      setValue('');\n      inputRef.current?.focus();\n    }\n  };\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    const value = event.target.value;\n    dispatch(searchFieldTyping(value));\n    setValue(value);\n  };\n\n  return (\n    <InputGroup m={3} bg=\"blue.50\" maxW=\"250px\" mx=\"auto\">\n      {value &&\n        <InputRightElement\n          children={\n            <IconButton\n              variant=\"ghost\"\n              size=\"sm\"\n              icon={<FiX />}\n              aria-label=\"Clear search field\"\n              _focus={{ boxShadow: 'none' }}\n              onClick={handleClearClick}\n            />\n          }\n        />\n      }\n      <Input\n        placeholder=\"Search a robot\"\n        ref={inputRef}\n        value={value}\n        onChange={handleInputChange}\n      />\n    </InputGroup>\n  );\n});\nSearchBox.displayName = 'SearchBox';\n\nexport default SearchBox;\n","import type React from 'react';\nimport { Box } from '@chakra-ui/react';\n\ntype TScrollProps = {\n  offsetH: number;\n};\n\nconst Scroll: React.FC<TScrollProps> = ({ offsetH, children }) => {\n  return (\n    <Box overflowY=\"auto\" border=\"1px solid black\" height={`calc(100vh - ${offsetH}px)`}>\n      {children}\n    </Box>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport { Heading } from '@chakra-ui/react';\n\ntype TErrorBoundaryProps = {};\ntype TErrorBoundaryState = { hasError: boolean; };\n\nexport default class ErrorBoundary extends React.Component<TErrorBoundaryProps, TErrorBoundaryState> {\n  constructor (props: TErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError () {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  // componentDidCatch (error: Error, errorInfo: ErrorInfo) {\n  //     // You can also log the error to an error reporting service\n  //     logErrorToMyService(error, errorInfo);\n  // }\n\n  render () {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <Heading as=\"h2\" size=\"md\" color=\"teal.300\">Ops. This is not good!</Heading>;\n    }\n\n    return this.props.children;\n  }\n}\n","import type React from 'react';\nimport { Box, Image, Heading, Text } from '@chakra-ui/react';\n\ntype TCardProps = {\n  name: string;\n  username: string;\n  email: string;\n};\n\nconst Card: React.FC<TCardProps> = ({ username, name, email }) => {\n  return (\n    <Box\n      d=\"inline-grid\"\n      bg=\"green.200\"\n      maxW=\"300px\"\n      height=\"360px\"\n      rounded=\"md\"\n      p={4}\n      m={4}\n      boxShadow=\"md\"\n      _hover={{ transform: \"scale(1.05)\" }}\n      transition=\"all .2s ease-in-out\"\n    >\n      <Image\n        alt=\"avatar of a robot\"\n        src={`https://robohash.org/${username}?size=250x250`}\n        fallbackSrc=\"placeholder_robot.png\" mx=\"auto\"\n      />\n      <Box textAlign=\"center\">\n        <Heading as=\"h3\" size=\"md\">{name}</Heading>\n        <Text fontSize=\"md\" mt=\"1\">{email.toLowerCase()}</Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Card;\n","import type React from 'react';\n\nimport { IRobot } from '../redux/robots/robots.type';\nimport Card from './Card';\n\ntype TCardListProps = {\n  robots: IRobot[];\n};\n\nconst CardList: React.FC<TCardListProps> = ({ robots }) => {\n  return (\n    <>\n      {robots.map(robot =>\n        <Card\n          key={robot.id}\n          username={robot.username}\n          name={robot.name}\n          email={robot.email}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CardList;\n","import type React from 'react';\nimport { memo as ReactMemo } from 'react';\n\nimport { IRobot } from '../redux/robots/robots.type';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport CardList from '../components/CardList';\n\ntype TRobotsProps = {\n  robots: IRobot[];\n};\n\nconst BreakException = {};\n\nconst Robots: React.FC<TRobotsProps> = ReactMemo(({ robots }) => {\n  return (\n    <Scroll offsetH={155}>\n      <ErrorBoundary>\n        <CardList robots={robots} />\n      </ErrorBoundary>\n    </Scroll>\n  );\n}, (prevProps, nextProps) => {\n  if (nextProps.robots.length !== prevProps.robots.length) return false;\n\n  let propsAreEqual = true;\n  try {\n    nextProps.robots.forEach((robot, i) => {\n      if (robot.id !== prevProps.robots[i].id) {\n        propsAreEqual = false;\n        throw BreakException;\n      }\n    });\n  } catch (e) {\n    if (e !== BreakException) throw e;\n  }\n  return propsAreEqual;\n});\nRobots.displayName = 'Robots';\n\nexport default Robots;\n","export enum ERobotsActionType {\n  FETCH_ROBOTS_START = 'FETCH_ROBOTS_START',\n  FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS',\n  FETCH_ROBOTS_FAILURE = 'FETCH_ROBOTS_FAILURE'\n}\n\nexport interface IRobot {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n}\n","import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { ERobotsActionType, IRobot } from './robots.type';\nimport { RootState } from '../store';\n\n// Define a type for the slice state\ninterface IRobotsState {\n  robots: IRobot[];\n  isFetching: boolean;\n  errorMessage: string;\n}\n\n// Define the initial state using that type\nconst initialState: IRobotsState = {\n  robots: [],\n  isFetching: true,\n  errorMessage: ''\n};\n\nexport const fetchRobotsStart = createAction<void, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_START);\n\nexport const fetchRobotsSuccess = createAction<IRobot[], ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_SUCCESS);\n\nexport const fetchRobotsFailure = createAction<string, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_FAILURE);\n\nexport const robotsSlice = createSlice({\n  name: 'robots',\n  // `robotsSlice` will infer the state type from the `initialState` argument\n  initialState,\n  // reducers: {\n  //   fetchRobotsStart: state => {\n  //     // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n  //     // doesn't actually mutate the state because it uses the Immer library,\n  //     // which detects changes to a \"draft state\" and produces a brand new\n  //     // immutable state based off those changes\n  //     state.isFetching = true;\n  //   },\n  //   fetchRobotsSuccess: (state, action: PayloadAction<IRobot[]>) => {\n  //     state.isFetching = false;\n  //     state.robots = action.payload;\n  //     state.errorMessage = '';\n  //   },\n  //   fetchRobotsFailure: (state, action: PayloadAction<string>) => {\n  //     state.isFetching = false;\n  //     state.errorMessage = action.payload;\n  //     state.robots = [];\n  //   }\n  // },\n  reducers: {},\n  // \"builder callback API\", recommended for TypeScript users\n  extraReducers: builder => {\n    builder.addCase(fetchRobotsStart, state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.isFetching = true;\n    });\n    builder.addCase(fetchRobotsSuccess, (state, action: PayloadAction<IRobot[]>) => {\n      state.isFetching = false;\n      state.robots = action.payload;\n      state.errorMessage = '';\n    });\n    builder.addCase(fetchRobotsFailure, (state, action: PayloadAction<string>) => {\n      state.isFetching = false;\n      state.errorMessage = action.payload;\n      state.robots = [];\n    });\n  }\n});\n\n// export reducers actions to be used in saga\n// export const { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } = robotsSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.robots.robots)`\nexport const selectRobots = (state: RootState) => state.robotsState.robots;\n\nexport default robotsSlice.reducer;\n","import type React from 'react';\nimport { useEffect } from 'react';\nimport { ChakraProvider, extendTheme, Box } from '@chakra-ui/react';\n\nimport Fonts from '../components/Fonts';\nimport Heading from './Heading';\nimport SearchBox from './SearchBox';\nimport Robots from './Robots';\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks';\nimport { fetchRobotsStart } from '../redux/robots/robots.slice';\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      \"body\": {\n        width: \"100%\",\n        height: \"100%\",\n        bgGradient: \"linear(to-r, teal.500, blue.900)\",\n        overflow: \"hidden\"\n      }\n    }\n  }\n});\n\nconst Main: React.FC = () => {\n  const robots = useAppSelector(state => state.robotsState.robots);\n  const searchField = useAppSelector(state => state.searchState.searchField);\n  const isLoading = useAppSelector(state => state.robotsState.isFetching);\n  const errorMessage = useAppSelector(state => state.robotsState.errorMessage);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRobotsStart());\n  }, [dispatch]);\n\n  const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Fonts />\n      <Box textAlign=\"center\">\n        <Heading size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200}>RoboFriends</Heading>\n        {isLoading\n          ? <Heading>Loading...</Heading>\n          : errorMessage\n            ? <Heading>{errorMessage}</Heading>\n            : <>\n              <SearchBox />\n              {filteredRobots.length\n                ? <Robots robots={filteredRobots} />\n                : <Heading size=\"l\">No robots found :(</Heading>\n              }\n            </>\n        }\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default Main;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport robotsReducer from './robots/robots.slice';\nimport searchReducer from './search/search.slice';\n\nconst rootReducer = combineReducers({\n  robotsState: robotsReducer,\n  searchState: searchReducer\n});\n\nexport default rootReducer;\n","import { takeLatest, call, put, delay } from 'redux-saga/effects';\n\nimport { IRobot } from './robots.type';\nimport { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } from './robots.slice';\nimport { searchFieldChange } from '../search/search.slice';\n\nconst doFetchRobots = async () => {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  return await response.json();\n};\n\nfunction* fetchRobotsWorker () {\n  try {\n    yield delay(2000);\n\n    if (Math.random() > 0.2) {\n      const robots: IRobot[] = yield call(doFetchRobots);\n      yield put(fetchRobotsSuccess(robots));\n      yield put(searchFieldChange(''));\n    } else {\n      yield put(fetchRobotsFailure('error fetching robots'));\n    }\n  } catch (error) {\n    yield put(fetchRobotsFailure(error.message));\n  }\n}\n\nexport function* fetchRobotsWatcher () {\n  yield takeLatest(fetchRobotsStart.type, fetchRobotsWorker);\n}\n","import { debounce, put } from 'redux-saga/effects';\n\nimport { searchFieldTyping, searchFieldChange } from './search.slice';\n\nfunction* searchFieldTypingWorker (action: ReturnType<typeof searchFieldTyping>) {\n  yield put(searchFieldChange(action.payload));\n}\n\nexport function* searchFieldTypingWatcher () {\n  yield debounce(200, searchFieldTyping.type, searchFieldTypingWorker);\n}\n","import { fork } from 'redux-saga/effects';\n\nimport { fetchRobotsWatcher } from './robots/robots.saga';\nimport { searchFieldTypingWatcher } from './search/search.saga';\n\nexport default function* rootSaga () {\n  yield fork(fetchRobotsWatcher);\n  yield fork(searchFieldTypingWatcher);\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducer';\nimport rootSaga from './saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware]\n});\n\nlet sagaTask = sagaMiddleware.run(rootSaga);\n\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  module.hot.accept('./reducer', () => store.replaceReducer(rootReducer));\n  module.hot.accept('./saga', () => {\n    const newRootSaga = require('./saga').default;\n    sagaTask.cancel();\n    sagaTask.toPromise().then(() => {\n      sagaTask = sagaMiddleware.run(newRootSaga);\n    });\n  });\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {robots: RobotsState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Main from './containers/Main';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Main />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}