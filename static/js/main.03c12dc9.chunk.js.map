{"version":3,"sources":["redux/robots/robots.type.ts","components/Fonts.tsx","components/Scroll.tsx","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/ErrorBoundary.tsx","redux/hooks.ts","redux/robots/robots.slice.ts","redux/search/search.type.ts","redux/search/search.slice.ts","containers/Main.tsx","redux/reducer.ts","redux/robots/robots.saga.ts","redux/search/search.saga.ts","redux/saga.ts","redux/store.ts","serviceWorker.ts","reportWebVitals.ts","index.tsx"],"names":["ERobotsActionType","Fonts","styles","process","Scroll","offsetH","children","overflowY","border","height","Card","username","name","email","d","bg","maxW","rounded","p","m","boxShadow","_hover","transform","transition","alt","src","fallbackSrc","mx","textAlign","as","size","fontSize","mt","toLowerCase","CardList","robots","Fragment","map","robot","id","SearchBox","onSearchChange","useState","value","setValue","inputRef","useRef","variant","icon","aria-label","_focus","onClick","current","focus","placeholder","ref","onChange","event","target","ErrorBoundary","props","state","hasError","this","color","React","Component","useAppSelector","useSelector","ESearchActionType","fetchRobotsStart","createAction","FETCH_ROBOTS_START","fetchRobotsSuccess","FETCH_ROBOTS_SUCCESS","fetchRobotsFailure","FETCH_ROBOTS_FAILURE","robotsSlice","createSlice","initialState","isFetching","errorMessage","reducers","extraReducers","builder","addCase","action","payload","searchFieldTyping","SEARCH_FIELD_TYPING","searchFieldChange","SEARCH_FIELD_CHANGE","searchSlice","searchField","theme","extendTheme","global","width","bgGradient","overflow","Main","robotsState","isLoading","searchState","dispatch","useDispatch","useEffect","filteredRobots","filter","includes","fontFamily","fontWeight","rootReducer","combineReducers","robotsReducer","searchReducer","fetchRobotsWorker","fetchRobotsWatcher","doFetchRobots","a","fetch","response","json","delay","Math","random","call","put","message","takeLatest","type","searchFieldTypingWorker","searchFieldTypingWatcher","debounce","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.03c12dc9.chunk.js","sourcesContent":["export enum ERobotsActionType {\r\n    FETCH_ROBOTS_START = 'FETCH_ROBOTS_START',\r\n    FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS',\r\n    FETCH_ROBOTS_FAILURE = 'FETCH_ROBOTS_FAILURE'\r\n}\r\n\r\nexport interface IRobot {\r\n    id: number;\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n}\r\n","import type React from 'react';\r\nimport { Global } from '@emotion/react';\r\n\r\nexport const Fonts: React.FC = () => (\r\n    <Global\r\n        styles={`\r\n            @font-face {\r\n                font-family: 'SEGA LOGO FONT';\r\n                font-style: normal;\r\n                font-weight: normal;\r\n                font-display: swap;\r\n                src: local('SEGA LOGO FONT'), url(${process.env.PUBLIC_URL}/SEGA.woff) format('woff');\r\n            }\r\n        `}\r\n    />\r\n);\r\n","import type React from 'react';\r\nimport { Box } from '@chakra-ui/react';\r\n\r\ntype TScrollProps = {\r\n    offsetH: number;\r\n};\r\n\r\nconst Scroll: React.FC<TScrollProps> = ({ offsetH, children }) => {\r\n    return (\r\n        <Box overflowY=\"auto\" border=\"1px solid black\" height={`calc(100vh - ${offsetH}px)`}>\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import type React from 'react';\r\nimport { Box, Image, Heading, Text } from '@chakra-ui/react';\r\n\r\ntype TCardProps = {\r\n    name: string;\r\n    username: string;\r\n    email: string;\r\n};\r\n\r\nconst Card: React.FC<TCardProps> = ({ username, name, email }) => {\r\n    return (\r\n        <Box d=\"inline-grid\" bg=\"green.200\" maxW=\"300px\" height=\"360px\" rounded=\"md\" p={4} m={4} boxShadow=\"md\" _hover={{ transform: \"scale(1.05)\" }} transition=\"all .2s ease-in-out\">\r\n            <Image alt=\"avatar of a robot\" src={`https://robohash.org/${username}?size=250x250`} fallbackSrc=\"placeholder_robot.png\" mx=\"auto\" />\r\n            <Box textAlign=\"center\">\r\n                <Heading as=\"h3\" size=\"md\">{name}</Heading>\r\n                <Text fontSize=\"md\" mt=\"1\">{email.toLowerCase()}</Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport { IRobot } from '../redux/robots/robots.type';\r\nimport Card from './Card';\r\n\r\ntype TCardListProps = {\r\n    robots: IRobot[];\r\n};\r\n\r\nconst CardList: React.FC<TCardListProps> = ({ robots }) => {\r\n    return (\r\n        <React.Fragment>\r\n            {robots.map(robot => <Card key={robot.id} username={robot.username} name={robot.name} email={robot.email} />)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import type React from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport { Input, InputGroup, InputRightElement, IconButton } from '@chakra-ui/react';\r\nimport { FiX } from 'react-icons/fi';\r\n\r\ntype TSearchBoxProps = {\r\n    onSearchChange: (value: string) => void;\r\n};\r\n\r\nconst SearchBox: React.FC<TSearchBoxProps> = ({ onSearchChange }) => {\r\n    const [value, setValue] = useState<string>('');\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const handleClearClick: React.MouseEventHandler<HTMLButtonElement> = () => {\r\n        if (value) {\r\n            onSearchChange('');\r\n            setValue('');\r\n            inputRef.current?.focus();\r\n        }\r\n    };\r\n\r\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\r\n        const value = event.target.value;\r\n        onSearchChange(value);\r\n        setValue(value);\r\n    };\r\n\r\n    return (\r\n        <InputGroup m={3} bg=\"blue.50\" maxW=\"250px\" mx=\"auto\">\r\n            {value &&\r\n                <InputRightElement\r\n                    children={\r\n                        <IconButton\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            icon={<FiX />}\r\n                            aria-label=\"Clear search field\"\r\n                            _focus={{ boxShadow: 'none' }}\r\n                            onClick={handleClearClick} />\r\n                    }\r\n                />\r\n            }\r\n            <Input\r\n                placeholder=\"Search a robot\"\r\n                ref={inputRef}\r\n                value={value}\r\n                onChange={handleInputChange}\r\n            />\r\n        </InputGroup>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport { Heading } from '@chakra-ui/react';\r\n\r\ntype TErrorBoundaryProps = {};\r\ntype TErrorBoundaryState = { hasError: boolean; };\r\n\r\nexport default class ErrorBoundary extends React.Component<TErrorBoundaryProps, TErrorBoundaryState> {\r\n    constructor (props: TErrorBoundaryProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError () {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    // componentDidCatch (error: Error, errorInfo: ErrorInfo) {\r\n    //     // You can also log the error to an error reporting service\r\n    //     logErrorToMyService(error, errorInfo);\r\n    // }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <Heading as=\"h2\" size=\"md\" color=\"teal.300\">Ops. This is not good!</Heading>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { ERobotsActionType, IRobot } from './robots.type';\r\nimport { RootState } from '../store';\r\n\r\n// Define a type for the slice state\r\ninterface IRobotsState {\r\n    robots: IRobot[];\r\n    isFetching: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: IRobotsState = {\r\n    robots: [],\r\n    isFetching: true,\r\n    errorMessage: ''\r\n};\r\n\r\nexport const fetchRobotsStart = createAction<void, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_START);\r\n\r\nexport const fetchRobotsSuccess = createAction<IRobot[], ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_SUCCESS);\r\n\r\nexport const fetchRobotsFailure = createAction<string, ERobotsActionType>(ERobotsActionType.FETCH_ROBOTS_FAILURE);\r\n\r\nexport const robotsSlice = createSlice({\r\n    name: 'robots',\r\n    // `robotsSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    // reducers: {\r\n    //     fetchRobotsStart: state => {\r\n    //         // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    //         // doesn't actually mutate the state because it uses the Immer library,\r\n    //         // which detects changes to a \"draft state\" and produces a brand new\r\n    //         // immutable state based off those changes\r\n    //         state.isFetching = true;\r\n    //     },\r\n    //     fetchRobotsSuccess: (state, action: PayloadAction<IRobot[]>) => {\r\n    //         state.isFetching = false;\r\n    //         state.robots = action.payload;\r\n    //         state.errorMessage = '';\r\n    //     },\r\n    //     fetchRobotsFailure: (state, action: PayloadAction<string>) => {\r\n    //         state.isFetching = false;\r\n    //         state.errorMessage = action.payload;\r\n    //         state.robots = [];\r\n    //     }\r\n    // },\r\n    reducers: {},\r\n    // \"builder callback API\", recommended for TypeScript users\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchRobotsStart, state => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.isFetching = true;\r\n        });\r\n        builder.addCase(fetchRobotsSuccess, (state, action: PayloadAction<IRobot[]>) => {\r\n            state.isFetching = false;\r\n            state.robots = action.payload;\r\n            state.errorMessage = '';\r\n        });\r\n        builder.addCase(fetchRobotsFailure, (state, action: PayloadAction<string>) => {\r\n            state.isFetching = false;\r\n            state.errorMessage = action.payload;\r\n            state.robots = [];\r\n        });\r\n    }\r\n});\r\n\r\n// export reducers actions to be used in saga\r\n// export const { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } = robotsSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.robots.robots)`\r\nexport const selectRobots = (state: RootState) => state.robotsState.robots;\r\n\r\nexport default robotsSlice.reducer;\r\n","export enum ESearchActionType {\r\n    SEARCH_FIELD_TYPING = 'SEARCH_FIELD_TYPING',\r\n    SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE'\r\n}\r\n","import { createAction, createSlice } from '@reduxjs/toolkit';\r\n\r\nimport { ESearchActionType } from './search.type';\r\n\r\n// Define a type for the slice state\r\ninterface ISearchState {\r\n    searchField: string;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: ISearchState = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchFieldTyping = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_TYPING);\r\n\r\nexport const searchFieldChange = createAction<string, ESearchActionType>(ESearchActionType.SEARCH_FIELD_CHANGE);\r\n\r\nexport const searchSlice = createSlice({\r\n    name: 'search',\r\n    // `searchSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder.addCase(searchFieldChange, (state, action) => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.searchField = action.payload;\r\n        });\r\n    }\r\n});\r\n\r\nexport default searchSlice.reducer;\r\n","import React, { useEffect } from 'react';\r\nimport { ChakraProvider, extendTheme, Box, Heading, Text } from '@chakra-ui/react';\r\n\r\nimport { Fonts } from '../components/Fonts';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../redux/hooks';\r\nimport { fetchRobotsStart } from '../redux/robots/robots.slice';\r\nimport { searchFieldTyping } from '../redux/search/search.slice';\r\n\r\nconst theme = extendTheme({\r\n    styles: {\r\n        global: {\r\n            \"body\": {\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                bgGradient: \"linear(to-r, teal.500, blue.900)\",\r\n                overflow: \"hidden\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst Main: React.FC = () => {\r\n    const robots = useAppSelector(state => state.robotsState.robots);\r\n    const isLoading = useAppSelector(state => state.robotsState.isFetching);\r\n    const errorMessage = useAppSelector(state => state.robotsState.errorMessage);\r\n    const searchField = useAppSelector(state => state.searchState.searchField);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchRobotsStart());\r\n    }, [dispatch]);\r\n\r\n\r\n    const handleSearchChange = (value: string) => {\r\n        dispatch(searchFieldTyping(value));\r\n    };\r\n\r\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    return (\r\n        <ChakraProvider theme={theme}>\r\n            <Fonts />\r\n            <Box textAlign=\"center\">\r\n                <Heading as=\"h1\" size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200} color=\"teal.300\" m={5}>RoboFriends</Heading>\r\n                {isLoading\r\n                    ? <Heading color=\"gray.900\" m={5}>Loading...</Heading>\r\n                    : errorMessage\r\n                        ? <Text fontSize=\"md\" mt=\"1\">{errorMessage}</Text>\r\n                        : <React.Fragment>\r\n                            <SearchBox onSearchChange={handleSearchChange} />\r\n                            <Scroll offsetH={155}>\r\n                                <ErrorBoundary>\r\n                                    <CardList robots={filteredRobots} />\r\n                                </ErrorBoundary>\r\n                            </Scroll>\r\n                        </React.Fragment>\r\n                }\r\n            </Box>\r\n        </ChakraProvider>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport robotsReducer from './robots/robots.slice';\r\nimport searchReducer from './search/search.slice';\r\n\r\nconst rootReducer = combineReducers({\r\n    robotsState: robotsReducer,\r\n    searchState: searchReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { takeLatest, call, put, delay } from 'redux-saga/effects';\r\n\r\nimport { IRobot } from './robots.type';\r\nimport { fetchRobotsStart, fetchRobotsSuccess, fetchRobotsFailure } from './robots.slice';\r\nimport { searchFieldChange } from '../search/search.slice';\r\n\r\nconst doFetchRobots = async () => {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    return await response.json();\r\n};\r\n\r\nfunction* fetchRobotsWorker () {\r\n    try {\r\n        yield delay(2000);\r\n\r\n        if (Math.random() >= 0.5) {\r\n            const robots: IRobot[] = yield call(doFetchRobots);\r\n            yield put(fetchRobotsSuccess(robots));\r\n            yield put(searchFieldChange(''));\r\n        } else {\r\n            yield put(fetchRobotsFailure('error fetching robots'));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchRobotsFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* fetchRobotsWatcher () {\r\n    yield takeLatest(fetchRobotsStart.type, fetchRobotsWorker);\r\n}\r\n","import { debounce, put } from 'redux-saga/effects';\r\n\r\nimport { searchFieldTyping, searchFieldChange } from './search.slice';\r\n\r\nfunction* searchFieldTypingWorker (action: ReturnType<typeof searchFieldTyping>) {\r\n    yield put(searchFieldChange(action.payload));\r\n}\r\n\r\nexport function* searchFieldTypingWatcher () {\r\n    yield debounce(200, searchFieldTyping.type, searchFieldTypingWorker);\r\n}\r\n","import { fork } from 'redux-saga/effects';\r\n\r\nimport { fetchRobotsWatcher } from './robots/robots.saga';\r\nimport { searchFieldTypingWatcher } from './search/search.saga';\r\n\r\nexport default function* rootSaga () {\r\n    yield fork(fetchRobotsWatcher);\r\n    yield fork(searchFieldTypingWatcher);\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './reducer';\r\nimport rootSaga from './saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [...getDefaultMiddleware({ thunk: false }), sagaMiddleware]\r\n});\r\n\r\nlet sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./reducer', () => store.replaceReducer(rootReducer));\r\n    module.hot.accept('./saga', () => {\r\n        const newRootSaga = require('./saga').default;\r\n        sagaTask.cancel();\r\n        sagaTask.toPromise().then(() => {\r\n            sagaTask = sagaMiddleware.run(newRootSaga);\r\n        });\r\n    });\r\n}\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {robots: RobotsState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Main from './containers/Main';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Main />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}