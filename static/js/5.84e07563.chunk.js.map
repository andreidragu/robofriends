{"version":3,"sources":["components/Fonts.tsx","components/Loading.tsx","containers/Main.tsx","redux/hooks.ts","containers/Heading.tsx"],"names":["Fonts","styles","process","Loading","h","thickness","speed","emptyColor","color","size","ContentBodyLazy","ReactLazy","theme","extendTheme","global","width","height","bgGradient","overflow","Main","isLoading","useAppSelector","state","robotsState","isFetching","errorMessage","dispatch","useAppDispatch","useEffect","fetchRobotsStart","textAlign","Heading","fontFamily","fontWeight","fallback","useDispatch","useSelector","ReactMemo","props","children","m","displayName"],"mappings":"6LAiBeA,EAdS,kBACtB,cAAC,IAAD,CACEC,OAAM,wPAM0CC,eAN1C,2D,kBCYKC,EAdW,WACxB,OACE,cAAC,IAAD,CAAQC,EAAE,QAAV,SACE,cAAC,IAAD,CACEC,UAAU,MACVC,MAAM,QACNC,WAAW,WACXC,MAAM,WACNC,KAAK,U,wBCAPC,EAAkBC,gBAAU,kBAAM,uDAElCC,EAAQC,YAAY,CACxBZ,OAAQ,CACNa,OAAQ,CACN,KAAQ,CACNC,MAAO,OACPC,OAAQ,OACRC,WAAY,mCACZC,SAAU,cAkCHC,UA5BQ,WACrB,IAAMC,EAAYC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,cACtDC,EAAeJ,aAAe,SAAAC,GAAK,OAAIA,EAAMC,YAAYE,gBACzDC,EAAWC,cAOjB,OALAC,qBAAU,WACRF,EAASG,iBACR,CAACH,IAIF,eAAC,IAAD,CAAgBd,MAAOA,EAAvB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,CAAKkB,UAAU,SAAf,UACE,cAACC,EAAA,EAAD,CAAStB,KAAK,MAAMuB,WAAW,iBAAiBC,WAAY,IAA5D,yBACCb,EACG,cAAC,EAAD,IACAK,EACE,cAACM,EAAA,EAAD,UAAUN,IACV,cAAC,WAAD,CAAUS,SAAU,cAAC,EAAD,IAApB,SACA,cAACxB,EAAD,c,gCC9Cd,gFAKaiB,EAAiB,kBAAMQ,eACvBd,EAAkDe,K,gCCL/D,4BASML,EAAmCM,gBAAU,SAAAC,GACjD,IAAQC,EAAuED,EAAvEC,SAAR,EAA+ED,EAA7D7B,YAAlB,MAAyB,KAAzB,IAA+E6B,EAAhDN,kBAA/B,MAA4C,UAA5C,IAA+EM,EAAxBL,kBAAvD,MAAoE,OAApE,EAEA,OACE,cAAC,IAAD,CACExB,KAAMA,EACNuB,WAAYA,EACZC,WAAYA,EACZzB,MAAM,WACNgC,EAAG,EALL,SAOGD,OAIPR,EAAQU,YAAc,UAEPV","file":"static/js/5.84e07563.chunk.js","sourcesContent":["import type React from 'react';\nimport { Global } from '@emotion/react';\n\nconst Fonts: React.FC = () => (\n  <Global\n    styles={`\n            @font-face {\n                font-family: 'SEGA LOGO FONT';\n                font-style: normal;\n                font-weight: normal;\n                font-display: swap;\n                src: local('SEGA LOGO FONT'), url(${process.env.PUBLIC_URL}/SEGA.woff) format('woff');\n            }\n        `}\n  />\n);\n\nexport default Fonts;\n","import type React from 'react';\r\nimport { Center, Spinner } from '@chakra-ui/react';\r\n\r\nconst Loading: React.FC = () => {\r\n  return (\r\n    <Center h=\"100vh\">\r\n      <Spinner\r\n        thickness=\"4px\"\r\n        speed=\"0.65s\"\r\n        emptyColor=\"gray.200\"\r\n        color=\"blue.500\"\r\n        size=\"xl\"\r\n      />\r\n    </Center>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import type React from 'react';\nimport { useEffect, lazy as ReactLazy, Suspense } from 'react';\nimport { ChakraProvider, extendTheme, Box } from '@chakra-ui/react';\n\nimport Fonts from '../components/Fonts';\nimport Loading from '../components/Loading';\nimport Heading from './Heading';\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks';\nimport { fetchRobotsStart } from '../redux/robots/robots.slice';\n\nconst ContentBodyLazy = ReactLazy(() => import('./ContentBody'));\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      \"body\": {\n        width: \"100%\",\n        height: \"100%\",\n        bgGradient: \"linear(to-r, teal.500, blue.900)\",\n        overflow: \"hidden\"\n      }\n    }\n  }\n});\n\nconst Main: React.FC = () => {\n  const isLoading = useAppSelector(state => state.robotsState.isFetching);\n  const errorMessage = useAppSelector(state => state.robotsState.errorMessage);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchRobotsStart());\n  }, [dispatch]);\n\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Fonts />\n      <Box textAlign=\"center\">\n        <Heading size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200}>RoboFriends</Heading>\n        {isLoading\n          ? <Loading />\n          : errorMessage\n            ? <Heading>{errorMessage}</Heading>\n            : <Suspense fallback={<Loading />}>\n              <ContentBodyLazy />\n            </Suspense>\n        }\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default Main;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import type React from 'react';\nimport { memo as ReactMemo } from 'react';\nimport { Heading as ChakraHeading } from '@chakra-ui/react';\n\ntype THeadingProps = {\n  size?: string;\n  fontFamily?: string;\n  fontWeight?: number | string;\n};\n\nconst Heading: React.FC<THeadingProps> = ReactMemo(props => {\n  const { children, size = \"xl\", fontFamily = \"heading\", fontWeight = \"bold\" } = props;\n\n  return (\n    <ChakraHeading\n      size={size}\n      fontFamily={fontFamily}\n      fontWeight={fontWeight}\n      color=\"teal.300\"\n      m={5}\n    >\n      {children}\n    </ChakraHeading>\n  );\n});\nHeading.displayName = 'Heading';\n\nexport default Heading;\n"],"sourceRoot":""}