{"version":3,"sources":["Fonts.tsx","components/Scroll.tsx","components/CardList.tsx","components/SearchBox.tsx","components/ErrorBoundary.tsx","containers/Main.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Fonts","styles","Scroll","offsetH","children","overflowY","border","height","CardList","robots","Error","SearchBox","onSearchChange","m","bg","placeholder","maxW","onChange","event","target","value","ErrorBoundary","props","state","hasError","this","as","size","color","React","Component","theme","extendTheme","global","width","bgGradient","overflow","Main","useState","allRobots","setAllRobots","filteredRobots","setFilteredRobots","searchText","setSearchText","isLoading","setIsLoading","fetchRobots","a","fetch","response","json","setTimeout","useEffect","filter","robot","name","toLowerCase","includes","textAlign","fontFamily","fontWeight","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","log"],"mappings":"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","file":"static/js/main.107fda68.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Global } from '@emotion/react';\r\n\r\nexport const Fonts = () => (\r\n    <Global\r\n        styles={`\r\n            @font-face {\r\n                font-family: 'SEGA LOGO FONT';\r\n                font-style: normal;\r\n                font-weight: normal;\r\n                font-display: swap;\r\n                src: local('SEGA LOGO FONT'), url(SEGA.woff) format('woff');\r\n            }\r\n        `}\r\n    />\r\n);\r\n","import React from 'react';\r\nimport { Box } from '@chakra-ui/react';\r\n\r\ntype ScrollProps = {\r\n    offsetH: number;\r\n};\r\n\r\nconst Scroll: React.FC<ScrollProps> = ({ offsetH, children }) => {\r\n    return (\r\n        <Box overflowY=\"auto\" border=\"1px solid black\" height={`calc(100vh - ${offsetH}px)`}>\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nimport { IRobot } from '../typings/IRobot';\r\nimport Card from './Card';\r\n\r\ntype CardListProps = {\r\n    robots: IRobot[];\r\n};\r\n\r\nconst CardList: React.FC<CardListProps> = ({ robots }) => {\r\n    throw new Error('no');\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {robots.map(robot => <Card key={robot.id} username={robot.username} name={robot.name} email={robot.email} />)}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport { Input } from '@chakra-ui/react';\r\n\r\ntype SearchBoxProps = {\r\n    onSearchChange: (value: string) => void;\r\n};\r\n\r\nconst SearchBox: React.FC<SearchBoxProps> = ({ onSearchChange }) => {\r\n\r\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = event => {\r\n        onSearchChange(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Input m={3} bg=\"blue.50\" placeholder=\"Search a robot\" maxW=\"250px\" onChange={handleInputChange} />\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport { Heading } from '@chakra-ui/react';\r\n\r\ntype ErrorBoundaryProps = {};\r\ntype ErrorBoundaryState = { hasError: boolean; };\r\n\r\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n    constructor (props: ErrorBoundaryProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError () {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    // componentDidCatch (error: Error, errorInfo: ErrorInfo) {\r\n    //     // You can also log the error to an error reporting service\r\n    //     logErrorToMyService(error, errorInfo);\r\n    // }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <Heading as=\"h2\" size=\"md\" color=\"teal.300\">Ops. This is not good!</Heading>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ChakraProvider, extendTheme, Box, Heading } from '@chakra-ui/react';\r\n\r\nimport { Fonts } from '../Fonts';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { IRobot } from '../typings/IRobot';\r\n\r\nconst theme = extendTheme({\r\n    styles: {\r\n        global: {\r\n            \"body\": {\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                bgGradient: \"linear(to-r, teal.500, blue.900)\",\r\n                overflow: \"hidden\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst Main: React.FC = () => {\r\n    const [allRobots, setAllRobots] = useState<IRobot[]>([]);\r\n    const [filteredRobots, setFilteredRobots] = useState<IRobot[]>([]);\r\n    const [searchText, setSearchText] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n    const fetchRobots = async () => {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const json = await response.json();\r\n        setAllRobots(json);\r\n        setTimeout(() => { setIsLoading(false); }, 3000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchRobots();\r\n    }, []);\r\n\r\n    const handleSearchChange = (value: string) => {\r\n        setSearchText(value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFilteredRobots(allRobots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchText.toLowerCase());\r\n        }));\r\n    }, [allRobots, searchText]);\r\n\r\n    return (\r\n        <ChakraProvider theme={theme}>\r\n            <Fonts />\r\n            <Box textAlign=\"center\">\r\n                <Heading as=\"h1\" size=\"2xl\" fontFamily=\"SEGA LOGO FONT\" fontWeight={200} color=\"teal.300\" m={5}>RoboFriends</Heading>\r\n                {isLoading\r\n                    ? <Heading color=\"gray.900\" m={5}>Loading...</Heading>\r\n                    : <React.Fragment>\r\n                        <SearchBox onSearchChange={handleSearchChange} />\r\n                        <Scroll offsetH={155}>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filteredRobots} />\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </React.Fragment>\r\n                }\r\n            </Box>\r\n        </ChakraProvider>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './containers/Main';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}